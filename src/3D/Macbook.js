/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: jc1245 (https://sketchfab.com/jasperchui2007)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/macbook-pro-a2158f4d07c24861b268b170cb24c6d8
title: Macbook Pro
*/
import React, { useRef, useState, useEffect } from 'react';
import { useGLTF, Html } from '@react-three/drei';
import { gsap } from 'gsap';
import * as THREE from 'three';
import { isMobile } from 'react-device-detect';

export function Macbook(props) {
  const { nodes, materials } = useGLTF(
    process.env.PUBLIC_URL + '/macbook/scene.gltf'
  );
  const [MacRef, setMacRef] = useState(null);

  useEffect(() => {
    if (MacRef) {
      materials['Material.009'].side = THREE.FrontSide;
      let ctx = gsap.context(() => {
        const t1 = gsap.timeline({});

        t1.fromTo(
          MacRef.position,
          { y: '-=3px' },
          {
            y: '+=2.75%',
            scrollTrigger: {
              scrub: true,
              start: 'center center',
              end: '+=40%',
            },
          },
          '<+=50%'
        ).fromTo(
          MacRef.rotation,
          { y: 0 },
          {
            y: '+=6.25%',
            scrollTrigger: {
              start: 'center center',
              end: '+=40%',
              scrub: true,
            },
          }
        );

        if (!isMobile) {
          t1.fromTo(
            MacRef.position,
            { x: 0 },
            {
              x: '-=2%',
              scrollTrigger: {
                start: 'center center',
                end: 'bottom bottom',
                scrub: true,
              },
            }
          );
        } else {
          t1.fromTo(
            MacRef.position,
            { y: 0 },
            {
              y: '-=1%',
              scrollTrigger: {
                start: 'center center',
                end: 'bottom bottom',
                scrub: true,
              },
            }
          );
        }
      }, '.container');
      return () => ctx.revert();
    }
  }, [MacRef]);

  return (
    <group
      {...props}
      rotation={[0, 0, 0]}
      ref={setMacRef}
      scale={isMobile ? 1.5 : 3}
      dispose={null}
    >
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group position={[0, 0, -0.12]} rotation={[-1.82, 0, 0]}>
            <group
              position={[0, 0.01, 0.12]}
              rotation={[-Math.PI, 0, 0]}
              scale={[0.17, 0.17, 0.1]}
            >
              <mesh
                geometry={nodes.Object_25.geometry}
                material={materials['Material.009']}
              />
            </group>
            <mesh
              geometry={nodes.Object_19.geometry}
              material={materials.Metal}
            />
            <mesh
              geometry={nodes.Object_20.geometry}
              material={materials['Material.010']}
            />
            <mesh
              geometry={nodes.Object_21.geometry}
              material={materials['Material.008']}
            />
            <mesh
              geometry={nodes.Object_22.geometry}
              material={materials.Material}
            />
            <mesh
              geometry={nodes.Object_23.geometry}
              material={materials['SVGMat.006']}
            />
          </group>
          <mesh geometry={nodes.Object_4.geometry} material={materials.Metal} />
          <mesh geometry={nodes.Object_5.geometry} material={materials.Metal} />
          <mesh
            geometry={nodes.Object_6.geometry}
            material={materials['Material.002']}
          />
          <mesh
            geometry={nodes.Object_7.geometry}
            material={materials['Material.003']}
          />
          <mesh
            geometry={nodes.Object_8.geometry}
            material={materials['Material.007']}
          />
          <mesh
            geometry={nodes.Object_9.geometry}
            material={materials['Material.006']}
          />
          <mesh
            geometry={nodes.Object_10.geometry}
            material={materials['Material.005']}
          />
          <mesh
            geometry={nodes.Object_11.geometry}
            material={materials['Material.001']}
          />
          <mesh
            geometry={nodes.Object_12.geometry}
            material={materials['Material.001']}
          />
          <mesh
            geometry={nodes.Object_13.geometry}
            material={materials['Material.001']}
          />
          <mesh
            geometry={nodes.Object_14.geometry}
            material={materials['Material.001']}
          />
          <mesh
            geometry={nodes.Object_15.geometry}
            material={materials['Material.004']}
          />
          <mesh
            geometry={nodes.Object_16.geometry}
            material={materials['Material.013']}
          />
          <mesh
            geometry={nodes.Object_17.geometry}
            material={materials['Material.013']}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload(process.env.PUBLIC_URL + '/macbook/scene.gltf');
